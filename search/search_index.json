{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao validator_schema","text":"<p>Esta \u00e9 uma lib com recursos para valida\u00e7\u00e3o de campos do jsonschema que pode ser usado em APIRest.</p>"},{"location":"#exemplo-de-uso","title":"Exemplo de uso","text":"<p>Vamos supor que voc\u00ea tenha um servidor com Flask onde voc\u00ea vai receber por param\u00eatros um json e quer validar os campos name e password. Onde o name n\u00e3o deve vir vazio e password deve ter ao menos 8 caracteres. Isto pode ser validado de forma simples com o validator-schema</p> Exemplo de uso<pre><code>from flask import request\nimport json\nfrom validator_schema import ValidatorString, Validator\n\n...\n\n@app.route('/', methods = ['POST'])\ndef login():\n    data = request.get_json()\n\n    # Uma lista de validators (requerido por Validator)\n    list_validators = [\n        ValidatorString(\n            'name', min = 1,\n            msg_error = 'Field name without value'\n        ),\n        ValidatorString(\n            'password', min = 8,\n            msg_error = 'Field password minimum 8 caracters.'\n        )\n    ]\n    # Uma lista de nomes requeridos (tamb\u00e9m necess\u00e1rio para Validator)\n    requireds = ['name', 'password']\n\n    # Uma instancia do objeto Validator\n    v = Validator(list_validators, requireds)\n\n    try:\n        v.is_valid(data)\n    except ValueError as err: # Quando um ou mais campos n\u00e3o s\u00e3o validos\n        return json.dumps({'error': str(err)})\n\n    # Todos os campos passaram no teste.\n</code></pre> <p>Este \u00e9 um dos dos casos de uso, para mais detalhes veja os manuais relacionados as classes.</p>"},{"location":"validator/","title":"Validator","text":"<p>Usado para validar campos e criar schemas json.</p>"},{"location":"validator/#validator_schema.validator_schema.Validator.__init__","title":"__init__","text":"<pre><code>__init__(list_validate_fields: list[ValidatorField], requireds: list[str])\n</code></pre> <p>Recebe uma lista de parametros e os campos requeridos como obrigat\u00f3rios  para montar o objeto schemajson.</p> <p>Parameters:</p> Name Type Description Default <code>list_validate_fields</code> <code>list[ValidatorField]</code> <p>Uma lista com ValidatorFields que sabem como retornar uma representa\u00e7\u00e3o de campo do schema</p> required <code>requireds</code> <code>list[str]</code> <p>Lista de campos informados como requeridos</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Validator([ ValidatorString('descricao', min = 3) ], ['descricao'])\n</code></pre>"},{"location":"validator/#validator_schema.validator_schema.Validator.is_valid","title":"is_valid","text":"<pre><code>is_valid(data: dict, format_checker: any = None) -&gt; None\n</code></pre> <p>Verifica se o schema enviado \u00e9 valido, caso necess\u00e1rio \u00e9 poss\u00edvel incluir um format_checker  que pode ser usado para validar campos, por exemplo do tipo date. Caso algum campo n\u00e3o seja validado um ValueError \u00e9 lan\u00e7ado pelo m\u00e9todo.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Um dicionario que representa os dados a serem validados</p> required <code>format_checker</code> <code>any</code> <p>Um validador para algum tipo de campo especifico, por exemplo campos date</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Validator([ ValidatorString('descricao', min = 3) ], ['descricao'])\n&gt;&gt;&gt; v.is_valid({'descricao': 'Ola mundo'})\n</code></pre> <pre><code>&gt;&gt;&gt; v2 = Validator([ ValidatorDate('data') ], ['data'], jsonschema.FormatChecker([\"date\"]))\n&gt;&gt;&gt; v2.is_valid({'data': '2023-01-01'})\n</code></pre>"},{"location":"validator/#validator_schema.validator_schema.Validator.validate_json","title":"validate_json  <code>staticmethod</code>","text":"<pre><code>validate_json(form: any) -&gt; dict\n</code></pre> <p>Recebe um objeto do tipo request e verifica se o campo 'dados' foi  enviado, e se o mesmo \u00e9 um JSON.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>any</code> <p>Um parametro request dentro do contexto do Flask</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; Validator.validate_json(request) # O request do form contendo um body com 'dados' e um JSON.\n{'de': '2023', 'ate': '2023', 'grupos': '1', 'lojas': '1'}\n</code></pre> <p>Caso o form n\u00e3o atenda ao padr\u00e3o um retorno dict com atributo erro \u00e9 recebido</p> <pre><code>&gt;&gt;&gt; Validator.validate_json(request) # \n{\"erro\": \"ESPERADO UM ATRIBUTO DADOS QUE NAO EXISTE\", \"codigo\": 1}\n</code></pre>"},{"location":"validator_date/","title":"ValidatorDate","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para datas</p>"},{"location":"validator_date/#validator_schema.validator_schema.ValidatorDate.__init__","title":"__init__","text":"<pre><code>__init__(name: str, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente uma mensagem de erro  chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorDate('data', 'Idade n\u00e3o permitida')\n</code></pre>"},{"location":"validator_date/#validator_schema.validator_schema.ValidatorDate.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorDate('data')\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"data\": { \"type\": \"string\", \"format\": \"date\" } }\n</code></pre>"},{"location":"validator_enum/","title":"ValidatorEnum","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para enumeradores</p>"},{"location":"validator_enum/#validator_schema.validator_schema.ValidatorEnum.__init__","title":"__init__","text":"<pre><code>__init__(name: str, enum: list, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e o enumerador, e opcionalmente uma mensagem de erro  chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>enum</code> <code>list</code> <p>lista de valores a serem comparados para valida\u00e7\u00e3o</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorEnum('status', ['A', 'B', 'C'], 'Valor nao aceito')\n</code></pre>"},{"location":"validator_enum/#validator_schema.validator_schema.ValidatorEnum.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorEnum('status', ['A', 'B', 'C'])\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"status\": {\"type\": \"string\", \"enum\":  ['A', 'B', 'C'] } }\n</code></pre>"},{"location":"validator_hour/","title":"ValidatorHour","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para validar a hora enviada pelo usu\u00e1rio</p>"},{"location":"validator_hour/#validator_schema.validator_schema.ValidatorHour.__init__","title":"__init__","text":"<pre><code>__init__(name: str, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome do campo e opcionalmente uma mensagem de erro  chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string representa o nome do campo do schema ea ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador em caso de erro.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorHour('hora', 'Formato n\u00e3o aceito')\n</code></pre>"},{"location":"validator_hour/#validator_schema.validator_schema.ValidatorHour.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorRegex('telefone', regex = '\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}')\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; {\"telefone\": {\"type\": \"string\", \"format\": \"regex\", \"pattern\": \"\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}\"} }\n</code></pre>"},{"location":"validator_number/","title":"ValidatorNumber","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para numeros</p>"},{"location":"validator_number/#validator_schema.validator_schema.ValidatorNumber.__init__","title":"__init__","text":"<pre><code>__init__(name: str, min: int = None, max: int = None, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente os valores min e max, al\u00e9m de uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>min</code> <code>int</code> <p>Valor minimo aceito</p> <code>None</code> <code>max</code> <code>int</code> <p>Valor maximo aceito</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorNumber('idade', min = 18, max = 99, msg_error = 'Idade n\u00e3o permitida')\n</code></pre>"},{"location":"validator_number/#validator_schema.validator_schema.ValidatorNumber.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorNumber('idade', min = 18, max = 99)\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"idade\": {\"type\": \"string\", \"minimum\": 18, \"maximum\": 99 } }\n</code></pre>"},{"location":"validator_regex/","title":"ValidatorRegex","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar jsonschema de valida\u00e7\u00e3o de um regex</p>"},{"location":"validator_regex/#validator_schema.validator_schema.ValidatorRegex.__init__","title":"__init__","text":"<pre><code>__init__(name: str, regex: str, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome, a express\u00e3o regular (string) e opcionalmente uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>regex</code> <code>str</code> <p>Uma express\u00e3o regular para ser tratada na valida\u00e7\u00e3o do campo</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorRegex('telefone', regex = '\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}', msg_error = 'Express\u00e3o n\u00e3o validada')\n</code></pre>"},{"location":"validator_regex/#validator_schema.validator_schema.ValidatorRegex.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorRegex('telefone', regex = '\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}')\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; {\"telefone\": {\"type\": \"string\", \"format\": \"regex\", \"pattern\": \"\\([0-9]{2}\\)9[0-9]{4}-[0-9]{4}\"} }\n</code></pre>"},{"location":"validator_string/","title":"ValidatorString","text":"<p>         Bases: <code>ValidatorField</code></p> <p>Classe usada para criar o validador jsonschema para strings</p>"},{"location":"validator_string/#validator_schema.validator_schema.ValidatorString.__init__","title":"__init__","text":"<pre><code>__init__(name: str, min: int = None, max: int = None, msg_error: str = '') -&gt; None\n</code></pre> <p>Recebe o nome e opcionalmente os valores min e max, al\u00e9m de uma mensagem de erro,  que caso inserida ser\u00e1 chamada pelo validador.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Uma string que representa o nome do campo do schema a ser validado</p> required <code>msg_error</code> <code>str</code> <p>Mensagem de erro a ser acionada pelo validador caso o valor seja invalido.</p> <code>''</code> <code>min</code> <code>int</code> <p>Quantidade minima de caracteres aceitos</p> <code>None</code> <code>max</code> <code>int</code> <p>Quantidade maxima de caracteres aceitos</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorString('descricao', min = 1, max = 10, msg_error = 'Quantidade minima de 1 caractere e maxima de 10')\n</code></pre>"},{"location":"validator_string/#validator_schema.validator_schema.ValidatorString.to_schema","title":"to_schema","text":"<pre><code>to_schema() -&gt; dict\n</code></pre> <p>Retorna o dicionario do schemajson</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = ValidatorString('descricao', min = 3, max = 10)\n&gt;&gt;&gt; v.to_schema()\n&gt;&gt;&gt; { \"descricao\": {\"type\": \"string\", \"minLength\": 3, \"maxLength\": 10 } }\n</code></pre>"}]}